using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using Toolbox.BindingTable;

namespace DataDictionary.DataLayer.LibraryData
{
    /// <summary>
    /// Row layout of a Library Member Item.
    /// </summary>
    [Obsolete]
    public interface ILibraryMemberItem_Old : ILibraryAssemblyKey_old
    {
        /// <summary>
        /// Name of the Member, before being parsed.
        /// </summary>
        String? MemberName { get; }

        /// <summary>
        /// Summary block associated with the Member.
        /// </summary>
        String? MemberSummary { get; }
    }

    /// <summary>
    /// Type of Member the item represents
    /// </summary>
    [Obsolete]
    public enum LibraryMemberType
    {
        /// <summary>
        /// Null- Could not be identified.
        /// </summary>
        NULL,

        /// <summary>
        /// N: namespace- You can't add documentation comments to a namespace, but you can make cref ferences to them, where supported.
        /// </summary>
        NameSpace,

        /// <summary>
        /// T: type- A type is a class, interface, struct, enum, or delegate.
        /// </summary>
        Type,

        /// <summary>
        /// F: field
        /// </summary>
        Field,

        /// <summary>
        /// P: property- Includes indexers or other indexed properties.
        /// </summary>
        Property,

        /// <summary>
        /// M: method-  Includes special methods, such as constructors and operators.
        /// </summary>
        Method,

        /// <summary>
        /// E: event
        /// </summary>
        Event,
    }

    /// <summary>
    /// A Library Member is an element collected from the XML Documentation generated by Visual Studio.
    /// </summary>
    [Serializable, Obsolete]
    public class LibraryMemberItem_Old : BindingTableRow, ILibraryMemberItem_Old, ISerializable
    {
        /// <inheritdoc/>
        public Nullable<Guid> AssemblyId
        { get { return GetValue<Guid>("AssemblyId"); } set { SetValue<Guid>("AssemblyId", value); } }

        /// <inheritdoc/>
        public Nullable<Guid> MemberId
        { get { return GetValue<Guid>("MemberId"); } protected set { SetValue<Guid>("MemberId", value); } }

        /// <inheritdoc/>
        public String? MemberName { get { return GetValue("MemberName"); } set { SetValue("MemberName", value); } }

        /// <inheritdoc/>
        public String? MemberSummary { get { return GetValue("MemberSummary"); } set { SetValue("MemberSummary", value); } }

        /// <summary>
        /// Decoded Member Type from Member Name.
        /// </summary>
        public LibraryMemberType MemberType
        {
            get
            {
                if (MemberName is not null && MemberName.Split(":").FirstOrDefault() is String itemType)
                {
                    switch (itemType)
                    {
                        case "N": return LibraryMemberType.NameSpace; 
                        case "T": return LibraryMemberType.Type; // Primary Entity?
                        case "F": return LibraryMemberType.Field; // Item of interest. Alias + Attribute
                        case "P": return LibraryMemberType.Property; // Primary item of interest. Alias + Attribute
                        case "M": return LibraryMemberType.Method;
                        case "E": return LibraryMemberType.Event;
                        default: return LibraryMemberType.NULL;
                    }
                }
                else { return LibraryMemberType.NULL; }
            }
        }

        static readonly IReadOnlyList<DataColumn> columnDefinitions = new List<DataColumn>()
        {
            new DataColumn("AssemblyId", typeof(Guid)){ AllowDBNull = false},
            new DataColumn("MemberId", typeof(Guid)){ AllowDBNull = false},
            new DataColumn("MemberName", typeof(String)){ AllowDBNull = true},
            new DataColumn("MemberSummary", typeof(String)){ AllowDBNull = true},
        };

        /// <inheritdoc/>
        public override IReadOnlyList<DataColumn> ColumnDefinitions()
        { return columnDefinitions; }

        /// <summary>
        /// Constructor for LibraryMemberItem
        /// </summary>
        public LibraryMemberItem_Old() : base()
        {
            MemberId = Guid.NewGuid();
        }

        #region ISerializable
        /// <summary>
        /// Constructor used to deSerialize the object. Copy/Paste uses this method.
        /// </summary>
        /// <param name="serializationInfo"></param>
        /// <param name="streamingContext"></param>
        protected LibraryMemberItem_Old(SerializationInfo serializationInfo, StreamingContext streamingContext) : base(serializationInfo, streamingContext)
        { }
        #endregion

    }
}
